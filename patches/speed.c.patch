--- apps/openssl/speed.c.orig	Sat May 31 03:18:05 2025
+++ apps/openssl/speed.c	Sat May 31 03:18:17 2025
@@ -154,7 +154,16 @@ static void
 pkey_print_message(const char *str, const char *str2,
     long num, int bits, int sec);
 static void print_result(int alg, int run_no, int count, double time_used);
+#ifndef _WIN32
 static int do_multi(int multi);
+#else
+void speed_signal(int sigcatch, void (*func)(int sigraised));
+unsigned int speed_alarm(unsigned int seconds);
+void speed_alarm_free(int run);
+#define SIGALRM		14
+#define signal(sigcatch, func)	speed_signal((sigcatch), (func))
+#define alarm(seconds)		speed_alarm((seconds))
+#endif
 
 #define ALGOR_NUM	31
 #define SIZE_NUM	5
@@ -1087,8 +1096,10 @@ speed_main(int argc, char **argv)
 	const EVP_CIPHER *evp_cipher = NULL;
 	const EVP_MD *evp_md = NULL;
 	int decrypt = 0;
+#ifndef _WIN32
 	int multi = 0;
 	struct sigaction sa;
+#endif
 	const char *errstr = NULL;
 
 	if (pledge("stdio proc", NULL) == -1) {
@@ -1163,6 +1174,7 @@ speed_main(int argc, char **argv)
 			decrypt = 1;
 			j--;	/* Otherwise, -decrypt gets confused with an
 				 * algorithm. */
+#ifndef _WIN32
 		} else if (argc > 0 && strcmp(*argv, "-multi") == 0) {
 			argc--;
 			argv++;
@@ -1177,6 +1189,7 @@ speed_main(int argc, char **argv)
 			}
 			j--;	/* Otherwise, -multi gets confused with an
 				 * algorithm. */
+#endif
 		} else if (argc > 0 && strcmp(*argv, "-unaligned") == 0) {
 			argc--;
 			argv++;
@@ -1491,7 +1504,9 @@ speed_main(int argc, char **argv)
 			BIO_printf(bio_err, "-evp e          use EVP e.\n");
 			BIO_printf(bio_err, "-decrypt        time decryption instead of encryption (only EVP).\n");
 			BIO_printf(bio_err, "-mr             produce machine readable output.\n");
+#ifndef _WIN32
 			BIO_printf(bio_err, "-multi n        run n benchmarks in parallel.\n");
+#endif
 			BIO_printf(bio_err, "-unaligned n    use buffers with offset n from proper alignment.\n");
 			goto end;
 		}
@@ -1500,8 +1515,10 @@ speed_main(int argc, char **argv)
 		j++;
 	}
 
+#ifndef _WIN32
 	if (multi && do_multi(multi))
 		goto show_res;
+#endif
 
 	if (j == 0) {
 		for (i = 0; i < ALGOR_NUM; i++) {
@@ -1573,11 +1590,13 @@ speed_main(int argc, char **argv)
 #define COND(c)	(run && count<0x7fffffff)
 #define COUNT(d) (count)
 
+#ifndef _WIN32
 	memset(&sa, 0, sizeof(sa));
 	sigemptyset(&sa.sa_mask);
 	sa.sa_flags = SA_RESTART;
 	sa.sa_handler = sig_done;
 	sigaction(SIGALRM, &sa, NULL);
+#endif
 
 #ifndef OPENSSL_NO_MD4
 	if (doit[D_MD4]) {
@@ -2370,7 +2389,9 @@ speed_main(int argc, char **argv)
 				ecdh_doit[j] = 0;
 		}
 	}
+#ifndef _WIN32
 show_res:
+#endif
 	if (!mr) {
 		fprintf(stdout, "%s\n", SSLeay_version(SSLEAY_VERSION));
 		fprintf(stdout, "%s\n", SSLeay_version(SSLEAY_BUILT_ON));
@@ -2526,11 +2547,15 @@ pkey_print_message(const char *str, const char *str2, 
 static void
 print_result(int alg, int run_no, int count, double time_used)
 {
+#ifdef _WIN32
+	speed_alarm_free(run);
+#endif
 	BIO_printf(bio_err, mr ? "+R:%d:%s:%f\n"
 	    : "%d %s in %.2fs\n", count, names[alg], time_used);
 	results[alg][run_no] = ((double) count) / time_used * lengths[run_no];
 }
 
+#ifndef _WIN32
 static char *
 sstrsep(char **string, const char *delim)
 {
@@ -2731,5 +2756,6 @@ do_multi(int multi)
 	free(fds);
 	return 1;
 }
+#endif
 
 #endif /* OPENSSL_NO_SPEED */
